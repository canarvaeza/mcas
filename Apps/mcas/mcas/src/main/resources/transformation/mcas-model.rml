### ----- SI SE MODIFICA EL URI DEBO MODIFICAR ----- ###

# * direcciones que están quemadas -> Rol, multimediaFormato 

# ** Easy work around for classes

#    rr:predicateObjectMap [
#    	rr:predicate rdf:type;
#    	rr:objectMap
#    	[
#    		rr:template "http://mcas.com/vocab/{Id}";
#    	]
#    ];

# ** Easy work around for properties 

#    rr:subjectMap [
#    	rr:template "http://{Value}";
#    ].

### ----- ------------------------------------ ----- ###


@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix  rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix crml:       <http://semweb.mmlab.be/ns/crml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .

## --------------- DEPENDENCIES ----------- ###

### ----- MCONTEXT ----- ###
@prefix mcontext: <http://www.semanticweb.org/ontologies/mcontext#>.
@prefix alzheimer: <http://www.semanticweb.org/ontologies/domains/alzheimer#>.

### ----- ROLE ------ ##
@prefix role: <http://www.semanticweb.org/ontologies/role#>.

### ------ PERSON ------ ###
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

### ------ SENSOR -------- ###
@prefix sosa: <http://www.w3.org/ns/sosa/>.

### ------ LOCATION -------- ###
@prefix wgs84_pos: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix schema: <http://schema.org/>.
@prefix gn: <http://www.geonames.org/ontology#>.
@prefix location: <http://www.semanticweb.org/ontologies/location#> .

### ------ MULTIMEDIA -------- ###
@prefix multimedia: <http://www.semanticweb.org/ontologies/multimedia#> .
@prefix ma: <http://www.w3.org/ns/ma-ont#>.

### ----- ACTIVITY ----- ###
@prefix activity: <http://www.semanticweb.org/ontologies/activity#>.

### ----- TIME ----- ###
@prefix time: <http://www.semanticweb.org/ontologies/time>.

## ------------------------------------------###


## --------------- MAPPINGS --------------- ##
### ------ PERSON ------ ###

<#PersonMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Person.[*]"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Id}";
    	rr:class foaf:Person
    ];
    
    
    ## ----- BASIC ATRIBUTES ----- ##
    
    rr:predicateObjectMap [
    	rr:predicate foaf:firstname;
    	rr:objectMap
    	[
    		rml:reference "Name"
    	]
    ];
    
    rr:predicateObjectMap [
    	rr:predicate foaf:lastname;
    	rr:objectMap
    	[
    		rml:reference "Last-name"
    	]
    ];
    
    ## ----- EXTERNAL ATRIBUTES ----- ##
    
    rr:predicateObjectMap [
    	rr:predicate mcontext:hasRol;
    	rr:objectMap
    	[
    		rr:parentTriplesMap <#RolMapping> ;
    	]
    ],[
	    rr:predicate mcontext:isInvolvedIn;
    	rr:objectMap
    	[
    		#rr:template "http://{Activity.[*].Id}";
    		rr:parentTriplesMap <#ActivityMapping>
    	]
    ].




### ------- ROL ------ ###

<#RolMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Person.[*].Role"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Value}";
    ].




## ------ SSN ------ ###

<#DeviceMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Ssn.[*].Device"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Id}";
    	rr:class sosa:Platform
    ];
    
    ## ----- BASIC ATRIBUTES ----- ##
        
    rr:predicateObjectMap [
    	rr:predicate sosa:hosts;
    	rr:objectMap
    	[
    		rr:template "http://{Sensor}";

			#rr:parentTriplesMap <#SensorMapping>;
		] 
	];
	
	## ----- EXTERNAL ATRIBUTES ----- ##
	
	rr:predicateObjectMap [
    	rr:predicate gn:locatedIn;
    	rr:objectMap
    	[
    	
    		rr:template "http://{Location}";			
		] 
	].
	
	#[
	#    rr:predicate mcontext:describe;
    #	rr:objectMap
    #	[
    #		rr:template "http://{RecEntities.[*].Activity}";
    #	]
    #].
	
<#SensorMapping>

rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Ssn.[*].Sensor"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Id}";
    	rr:class sosa:Sensor
    ];
    
    ## ----- BASIC ATRIBUTES ----- ##
    
    rr:predicateObjectMap [
    	rr:predicate sosa:observes;
    	rr:objectMap
    	[
    		#rml:reference "Observe"
    		rr:template "http://{Observe}"
    	]
    ].
    
    ## ----- EXTERNAL ATRIBUTES ----- ##
	
#	rr:predicateObjectMap [
#	    rr:predicate mcontext:describe;
#    	rr:objectMap
#    	[
#    		rr:template "http://{RecEntities.[*].Activity}";
#    	]
#    ].


<#ObservationMapping>
    
    rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Ssn.[*].Observation.[*]"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Id}";
    	rr:class sosa:Observation
    ];
    
#    rr:predicateObjectMap [
#    	rr:predicate sosa:observedProperty;
#    	rr:objectMap
#    	[
#    		#rml:reference "Sensor.Observe"
#    		rr:template "http://{Observe}"
#    	]
#    ];
    
    rr:predicateObjectMap [
    	rr:predicate sosa:madeBySensor;
    	rr:objectMap
    	[
    		rr:template "http://{Sensor}"
    	]
    ];
    
    #VERIFICAR CÓMO TRATAR EL NÚMERO PORQUE NO ME SALE EL TIPO DE DATO
    
    rr:predicateObjectMap [
    	rr:predicate sosa:hasSimpleResult;
    	rr:objectMap
    	[
    		rml:reference "Value";
    		rr:datatype xsd:decimal
    	]
    ];
    
    rr:predicateObjectMap [
    	rr:predicate sosa:resultTime;
    	rr:objectMap
    	[
    		rml:reference "Time";
    		rr:datatype xsd:dateTime
    	]
    ];
    
    rr:predicateObjectMap [
	    rr:predicate mcontext:describe;
    	rr:objectMap
    	[
    		rr:template "http://{RecEntities.[*].Activity}";
    	]
    ].




### ----- MULTIMEDIA ----- ###

<#MultimediaMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Multimedia.[*]"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Id}";
    ];
        
        
    rr:predicateObjectMap [
    	rr:predicate rdf:type;
    	rr:objectMap
    	[
    		rr:template "http://{Type}";
    	]
    ];
    
    ## ----- BASIC ATRIB ----- ##
    
    rr:predicateObjectMap [
    	rr:predicate ma:hasFormat;
    	rr:objectMap
    	[
    		rr:template "http://{Format}";

			#rr:parentTriplesMap <#SensorMapping>;
		] 
	],[
    	rr:predicate multimedia:creationDate;
    	rr:objectMap
    	[
    		rml:reference "CreationTime";
    		rr:datatype xsd:dateTime
    	]
    ],[
    	rr:predicate ma:hasMultimediaDescriptor;
    	rr:objectMap
    	[
    		rr:parentTriplesMap <#DescriptorMapping>;
    	]
    ];
    
    ## ----- EXTERNAL ATRIB ----- ##
    
    rr:predicateObjectMap [
	    rr:predicate mcontext:describe;
    	rr:objectMap
    	[
    		rr:template "http://{RecEntities.[*].Activity}";
    	]
    ],[
    	rr:predicate gn:locatedIn;
    	rr:objectMap
    	[
    		rr:template "http://{Location}";			
		] 
	].
    
    
<#DescriptorMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Multimedia.[*].Descriptor"
	];

	rr:subjectMap [ 
	  rr:template "http://{Id}"
	];
	
	rr:predicateObjectMap [ 
		rr:predicate multimedia:descriptionText;
		rr:objectMap
		[
			rml:reference "Content";
			rr:datatype xsd:string;
		] 
	].




### ----- LOCATION ----- ###
<#LocationMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Location.[*]"
    ];
    
    #define la uri en el sistema
    rr:subjectMap [
    	rr:template "http://{Id}";
    ];
    
    rr:predicateObjectMap [
    	rr:predicate rdf:type;
    	rr:objectMap
    	[
    		rr:template "http://{Type}";
    	]
    ];
        
	rr:predicateObjectMap 
  		[
		rr:predicate wgs84_pos:lat;
		rr:objectMap 
    	[
      		rml:reference "Coordinates.latitude" 
    	]
  	], [
    	rr:predicate wgs84_pos:long;
    	rr:objectMap 
    	[
      	rml:reference "Coordinates.longitude" 
    	]
  	].




### ----- ACTIVITY ----- ###

<#ActivityMapping>
	rml:logicalSource [
		rml:source "{direction}input.json";
	    rml:referenceFormulation ql:JSONPath;
	    rml:iterator "$.Activity.[*]"
    ];

    rr:subjectMap [
    	rr:template "http://{Id}";
    ];
    
    rr:predicateObjectMap [
    	rr:predicate rdf:type;
    	rr:objectMap
    	[
    		rr:template "http://{Type}";
    	]
    ];
    
    ## ----- BASIC ATRIBUTES ----- ##
    
    
    
    ## ----- EXTERNAL ATRIBUTES ----- ##
    rr:predicateObjectMap [
    	rr:predicate time:hasBeginningTime;
    	rr:objectMap
    	[
    		rml:reference "Time.Beginning";
    		rr:datatype xsd:dateTime
    	]
    ],[
    	rr:predicate time:hasEndingTime;
    	rr:objectMap
    	[
    		rml:reference "Time.Ending";
    		rr:datatype xsd:dateTime
    	]
    ].