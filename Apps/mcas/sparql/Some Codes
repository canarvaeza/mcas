# RESOURCES
# https://es.slideshare.net/LeeFeigenbaum/sparql-cheat-sheet
# https://semanticarts.com/blog/sparql-change-instance-uris/
# http://vos.openlinksw.com/owiki/wiki/VOS/VirtTipsAndTricksSPARQL11Insert
# https://www.youtube.com/watch?v=FvGndkpa4K0

# tutorial
# https://virtuoso.openlinksw.com/tutorials/sparql/

# RULES
## http://vos.openlinksw.com/owiki/wiki/VOS/VirtSPARQLReasoningTutorial
## https://www.mail-archive.com/virtuoso-users@lists.sourceforge.net/msg05523.html

sparql clear graph <http://vocab.org/relationship/>;
sparql load <http://vocab.org/relationship/rel-vocab-20100607.rdf> into <http://vocab.org/relationship/>;

rdfs_rule_set ('urn:owl:inference:rules:tests', 'http://vocab.org/relationship/') ;

# jena virtuoso example
https://www.programcreek.com/java-api-examples/?code=YourDataStories/harvesters/harvesters-master/DiavgeiaGeneralHarvester/src/organizations/Queries.java#




#http://vos.openlinksw.com/owiki/wiki/VOS/VirtJenaSPARQLExample9

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Graph;
import com.hp.hpl.jena.rdf.model.*;
import java.util.Iterator;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample9 {

	/**
	 * Executes a SPARQL query against a virtuoso url and prints results.
	 */
	public static void main(String[] args) {

		String url;
		if(args.length == 0)
		    url = "jdbc:virtuoso://localhost:1111";
		else
		    url = args[0];

/*			STEP 1			*/
		VirtGraph set = new VirtGraph (url, "dba", "dba");

/*			STEP 2			*/
                String str = "CLEAR GRAPH <http://test1>";
                VirtuosoUpdateRequest vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();                  

                str = "INSERT INTO GRAPH <http://test1> { <http://aa> <http://bb> 'cc' . <http://aa1> <http://bb> 123. }";
                vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();                  


/*		Select all data in virtuoso	*/
		Query sparql = QueryFactory.create("SELECT * FROM <http://test1> WHERE { ?s ?p ?o }");
		VirtuosoQueryExecution vqe = VirtuosoQueryExecutionFactory.create (sparql, set);
		ResultSet results = vqe.execSelect();
                System.out.println("\nSELECT results:");
		while (results.hasNext()) {
			QuerySolution rs = results.nextSolution();
		    RDFNode s = rs.get("s");
		    RDFNode p = rs.get("p");
		    RDFNode o = rs.get("o");
		    System.out.println(" { " + s + " " + p + " " + o + " . }");
		}

		sparql = QueryFactory.create("DESCRIBE <http://aa> FROM <http://test1>");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		Model model = vqe.execDescribe();
 	        Graph g = model.getGraph();
                System.out.println("\nDESCRIBE results:");
	        for (Iterator i = g.find(Node.ANY, Node.ANY, Node.ANY); i.hasNext();) 
	           {
	              Triple t = (Triple)i.next();
		      System.out.println(" { " + t.getSubject() + " " + 
		      				 t.getPredicate() + " " + 
		      				 t.getObject() + " . }");
	        }



		sparql = QueryFactory.create("CONSTRUCT { ?x <http://test> ?y } FROM <http://test1> WHERE { ?x <http://bb> ?y }");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		model = vqe.execConstruct();
 	        g = model.getGraph();
                System.out.println("\nCONSTRUCT results:");
	        for (Iterator i = g.find(Node.ANY, Node.ANY, Node.ANY); i.hasNext();) 
	           {
	              Triple t = (Triple)i.next();
		      System.out.println(" { " + t.getSubject() + " " + 
		      				 t.getPredicate() + " " + 
		      				 t.getObject() + " . }");
	        }


		sparql = QueryFactory.create("ASK FROM <http://test1> WHERE { <http://aa> <http://bb> ?y }");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		boolean res = vqe.execAsk();
                System.out.println("\nASK results: "+res);


	}
}

